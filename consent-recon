--For explanation of these steps:
/* TODO: Before running Update table names: (dates need to be updated)
      - dev.cpc_mongo_email_27012022
      - dev.cpc_mongodb_27012022
      - dev.cps_primary_27012022
      - dev.cpc_ldc_cps_events_consent_reconciliation_27012022
      - dev.cps_primary_filtered_27012022
 */
—— update dates in ddmmyyyy format and yyyy-mm-dd format
---dates matched with run date
select max(preference_updated_at) from dev.cps_primary_27012022;
--null expected
select max(last_contacted_date) from dev.crm_rp_customer_27012022;
--dates matched with run date
select max(updated_at),count(distinct subscriber_key) from
dev.cpc_mongodb_27012022;
---counts, current should be higher than previous.
select count(*) from dev.cps_primary_27012022;
--214,513,932
select count(*) from dev.crm_rp_customer_27012022;
--45,845,820
select count(*) from dev.cpc_mongodb_27012022;
--213,206,858
select count(*) from dev.cps_primary_27012022;
--213,886,244
select count(*) from dev.crm_rp_customer_27012022;
--45,663,139
select count(*) from dev.cpc_mongodb_27012022;
--212,621,829
-- STEP 1: CREATE A TABLE OF MONGO _latest_ email permissions
/* If multiple email preferences are present (global + product), select the
latest based on updated_at timestamp
      This logic is applied by CPC's API layer before serving the data.
 */
with ordered as (
SELECT distinct *, row_number() OVER (PARTITION BY lower(trim(email_address))
order by pref_updated_at DESC) as rn
from dev.cpc_mongodb_27012022
WHERE pref_key = 'email'
)
SELECT id, account_id, lower(trim(email_address)) as email_address, 
updated_at, pref_context, pref_namespace, pref_key, pref_value,
pref_updated_at, pref_updated_by
INTO dev.cpc_mongo_email_27012022
from ordered
where rn=1;
grant select on dev.cpc_mongo_email_27012022 to group "gg-aws-ctm-data-prod-redshift-ldc-endusers";

-- Include only email preferences
SELECT distinct *
INTO dev.cps_primary_filtered_27012022
FROM dev.cps_primary_27012022 cps
WHERE cps.preference_key='email'
;
grant select on dev.cps_primary_filtered_27012022 to group "gg-aws-ctm-data-prod-redshift-ldc-endusers";

-- STEP 2: Create table for results
DROP TABLE IF EXISTS dev.cpc_ldc_cps_events_consent_reconciliation_27012022;

CREATE TABLE dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (
    consent VARCHAR(50) encode zstd,
    segment VARCHAR(20) encode zstd,
    description VARCHAR(50) encode zstd,
    number_records INT encode zstd,
    number_exc_recent_updates INT encode zstd,
    risk VARCHAR(4) DEFAULT 'Low' encode zstd,
    comment VARCHAR(200) encode zstd,
    investigation_comments VARCHAR(256) encode zstd
);




-- STEP 3: Run through each segment to calculate count of diffs with and without deletions and time lag. See Confluence page for more details
--SEG 01 CPS = TRUE, CPC = TRUE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, risk, comment)
WITH raw_data as (
    select cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE lower(cps.preference_value)='true'
    AND cpc.pref_key='email'
    AND cpc.pref_value='true'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
 )
SELECT 'Email' as consent,'SEG 01' as segment, 'CPS TRUE CPC TRUE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'None', 'MATCH' as comment
from agg as a, exc_rec_upd as xu
;

--SEG 02 CPS = FALSE , CPC = TRUE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE lower(cps.preference_value)='false'
    AND cpc.pref_key='email'
    AND cpc.pref_value='true'
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
 )
SELECT 'Email' as consent,'SEG 02' as segment, 'CPS FALSE CPC TRUE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Missing for Marketing' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 03 CPS IS NULL , CPC = TRUE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cps.preference_value is NULL
    AND cpc.pref_key='email'
    AND cpc.pref_value='true'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 03' as segment, 'CPS NULL CPC TRUE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Missing for marketing' as comment
from agg as a, exc_rec_upd as xu
;

--SEG 04 CPS = MISSING, CPC = TRUE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cpc.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cpc_mongo_email_27012022 cpc
    LEFT JOIN dev.cps_primary_filtered_27012022 cps
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cpc.pref_value='true'
    AND trim(lower(cps.email_address)) is NULL
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND (lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions') or r.cps_updated_by is null )
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 04' as segment, 'CPS MISSING CPC TRUE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Missing for marketing' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 05 CPS = TRUE, CPC = FALSE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, risk, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE lower(cps.preference_value)='true'
    AND cpc.pref_key='email'
    AND cpc.pref_value IS False
    AND cps.preference_key='email'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 05' as segment, 'CPS TRUE CPC FALSE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'High','MISMATCH - Could market in error unless in suppression list' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 06 CPS = FALSE , CPC = FALSE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, risk, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE lower(cps.preference_value)='false'
    AND cpc.pref_key='email'
    AND cpc.pref_value='false'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 06' as segment, 'CPS FALSE CPC FALSE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'None','MATCH' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 07 CPS IS NULL , CPC = FALSE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cps.preference_value is NULL
    AND cpc.pref_key='email'
    AND cpc.pref_value='false'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 07' as segment, 'CPS NULL CPC FALSE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Will not cause problem' as comment
from agg as a, exc_rec_upd as xu
;



--SEG 08 CPS = MISSING, CPC = FALSE
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cpc.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cpc_mongo_email_27012022 cpc
    LEFT JOIN dev.cps_primary_filtered_27012022 cps
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cpc.pref_value='false'
    AND trim(lower(cps.email_address)) is NULL
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND (lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions') or r.cps_updated_by is null)
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 08' as segment, 'CPS MISSING CPC FALSE' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Will not cause problem' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 09 CPS = TRUE, CPC = NULL
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, risk, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cpc_mongo_email_27012022 cpc
    JOIN dev.cps_primary_filtered_27012022 cps
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cpc.pref_value is NULL
    AND lower(cps.preference_value)='true'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 09' as segment, 'CPS TRUE CPC NULL' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates, 'High', 'MISMATCH - NULLs in CPC should not be possible' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 10 CPS = FALSE, CPC = NULL
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cpc_mongo_email_27012022 cpc
    JOIN dev.cps_primary_filtered_27012022 cps
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cpc.pref_value is NULL
    AND lower(cps.preference_value)='false'
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 10' as segment, 'CPS FALSE CPC NULL' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - NULLs in CPC should not be possible' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 11 CPS = MISSING, CPC = NULL
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cpc.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cpc_mongo_email_27012022 cpc
    LEFT JOIN dev.cps_primary_filtered_27012022 cps
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE cpc.pref_value is NULL
    AND cps.email_address is NULL
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE r.cpc_updated_at<'2022-01-27'
    AND (lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions') or r.cps_updated_by is null)
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 11' as segment, 'CPS MISSING CPC NULL' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - email exists in CPC but value is NULL, should exist in CPS' as comment
from agg as a, exc_rec_upd as xu
;


--SEG 12 CPS = TRUE, CPC = MISSING

INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, risk, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    LEFT JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    LEFT JOIN dim.email d
    ON trim(lower(cps.email_address))=trim(lower(d.email))
    WHERE d.errf_obfuscation_date IS NULL
    AND lower(cps.preference_value) = 'true'
    AND trim(lower(cpc.email_address)) is NULL
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE (r.cpc_updated_at<'2022-01-27' OR r.cpc_updated_at IS NULL)
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
    AND r.email_address NOT IN 
    
(emails
)
        
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 12' as segment, 'CPS TRUE CPC MISSING' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates, 'High', 'MISMATCH - Could market in error unless in exclude list. Check GDPR deletions and Account Closures' as comment
from agg as a, exc_rec_upd as xu
;

--SEG 13 CPS = FALSE, CPC = MISSING
INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    LEFT JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    LEFT JOIN dim.email d
    ON trim(lower(cps.email_address))=trim(lower(d.email))
    WHERE d.errf_obfuscation_date IS NULL
    AND lower(cps.preference_value)='false'
    AND cpc.email_address is NULL
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE (r.cpc_updated_at<'2022-01-27' OR r.cpc_updated_at IS NULL)
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
    AND r.email_address NOT IN 
    
(emails)
    
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 13' as segment, 'CPS FALSE CPC MISSING' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Would not cause a problem. Check GDPR deletions and Account Closures.' as comment
from agg as a, exc_rec_upd as xu
;



INSERT INTO  dev.cpc_ldc_cps_events_consent_reconciliation_27012022 (consent, segment, description, number_records, number_exc_recent_updates, comment)
WITH raw_data as (
    SELECT cps.email_address,cpc.pref_updated_at as cpc_updated_at,cps.preference_updated_by as cps_updated_by
    FROM dev.cps_primary_filtered_27012022 cps
    LEFT JOIN dev.cpc_mongo_email_27012022 cpc
    ON trim(lower(cps.email_address))=trim(lower(cpc.email_address))
    WHERE lower(cps.preference_value) is NULL
    AND trim(lower(cpc.email_address)) is NULL
    GROUP BY 1,2,3
), exc_rec_upd as (
    SELECT count(distinct trim(lower(r.email_address))) as num_exc
    FROM raw_data r
    WHERE (r.cpc_updated_at<'2022-01-27' OR r.cpc_updated_at IS NULL)
    AND lower(r.cps_updated_by) not in ('account-closure-service','gdpr-deletions')
), agg as (
    select count(distinct trim(lower(r.email_address))) as num
    from raw_data as r
)
SELECT 'Email' as consent,'SEG 14' as segment, 'CPS NULL CPC MISSING' as description, a.num as number_records,xu.num_exc as number_exc_recent_updates,'MISMATCH - Would not cause a problem' as comment
from agg as a, exc_rec_upd as xu
;


-- STEP 4: Output the results. This needs to be put into confluence
select * from dev.cpc_ldc_cps_events_consent_reconciliation_27012022
Order by segment;
grant select on dev.cpc_ldc_cps_events_consent_reconciliation_27012022 to group "gg-aws-ctm-data-prod-redshift-ldc-endusers";
